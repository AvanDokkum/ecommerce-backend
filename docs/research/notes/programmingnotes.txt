Notes

H2 database:
application.properties file:
spring.h2.console.enabled=true
The JDBC URL/location of the database needs to be defined as property =
spring.datasource.url=jdbc:h2:mem:test

To show the SQl being generated behind the scenes use property =
spring.jpa.show-sql=true
and to format the SQL use property =
spring.jpa.properties.hibernate.format_sql=true

JPA Entity:
An entity represents a table in a relational database.

To create a table from a POJO, annotate it with = @Entity, this entity needs a unique identifier.
To create a unique identifier for an entity, annotate a field with = @Id annotation.

Every field of the entity class would be mapped as a column in the database table.
Every created object of the entity class would be mapped as a row in the database table.

To give a specific name to an entity/table use @Entity(name = "table_name")

Examples of generation types for generating unique Id's =
    @GeneratedValue(strategy = GenerationType.AUTO) //default, let JPA choose strategy automatically depending on the database provider.
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
    generator = "order_seq") //use a database sequence to generate primary key values
    @SequenceGenerator(name = "order_seq",
    sequenceName = "order_sequence", allocationSize = 1) //definition of the sequence generator
    @GeneratedValue(strategy = GenerationType.TABLE) //make use of a table to simulate a sequence
    @GeneratedValue(strategy = GenerationType.IDENTITY) //use an identity column in the database to generate primary keys.

Repositories:
CrudRepository is basic Crud operations like Create, Read, Update, Delete
JpaRepository is a more specific definition of CrudRepository which adds more JPA specific methods like Flash, Save and Flash, and Delete in Batch

Validations in Spring Boot:
@NotNull
@NotEmpty
@Size(min = x, max = y)
@Email
@Min(value) and @Max(value)
add message like @Email(message = "Email should be valid") for custom messages
Use validations in combination with @Valid annotation in the controller

DTO's:
DTO's are needed so separate concerns from the model and API's.
If I want to change the output of my API (presentation layer), for example changing or adding fields in the JSON output of the Category model, the database also has to  changes.
To prevent that I can use DTO's to decouple the API output and the model+database.

To map Entities to DTO's use ModelMapper:
url: https://modelmapper.org/
"We can use ModelMapper to implicitly map an order instance to a new OrderDTO:

 ModelMapper modelMapper = new ModelMapper();
 OrderDTO orderDTO = modelMapper.map(order, OrderDTO.class);
 And we can test that properties are mapped as expected:

 assertEquals(order.getCustomer().getName().getFirstName(), orderDTO.getCustomerFirstName());
 assertEquals(order.getCustomer().getName().getLastName(), orderDTO.getCustomerLastName());
 assertEquals(order.getBillingAddress().getStreet(), orderDTO.getBillingStreet());
 assertEquals(order.getBillingAddress().getCity(), orderDTO.getBillingCity());"

 Encountered the follow error when running the tests:
 "
 Mockito is currently self-attaching to enable the inline-mock-maker. This will no longer work in future releases of the JDK. Please add Mockito as an agent to your build what is described in Mockito's documentation: https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#0.3
  WARNING: A Java agent has been loaded dynamically (C:\Users\arjan\.m2\repository\net\bytebuddy\byte-buddy-agent\1.15.11\byte-buddy-agent-1.15.11.jar)
  WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
  WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
  WARNING: Dynamic loading of agents will be disallowed by default in a future release
  Java HotSpot(TM) 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
"
to fix this error add mockito into javaagent using the following plugin statement in pom.xml:
"
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<argLine>
						-javaagent:${settings.localRepository}/org/mockito/mockito-core/${mockito.version}/mockito-core-${mockito.version}.jar
						-Xshare:off
					</argLine>
				</configuration>
			</plugin>
"



